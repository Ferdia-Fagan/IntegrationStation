{"version":3,"file":"code/full/backend/categories/types/utils/General.ts.js","mappings":";;;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D","sources":["webpack://dist/webpack/bootstrap","webpack://dist/webpack/runtime/make namespace object","webpack://dist/./src/code/full/backend/categories/types/utils/General.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * L_T & R_T with conflicts choosing L_T properties instead\n */\nexport type MergeTypeDominatingLeft<L_T, R_T> =\n    L_T &\n    Omit<R_T, keyof L_T>\n\n\nexport type ErrorBrand<Err extends string> = Readonly<{\n    [key in Err]: void;\n}>;\nexport type Filter<Obj extends Object, ValueType> = {\n    [Key in keyof Obj as ValueType extends Obj[Key] ? Key : never]\n    : Obj[Key]\n}\ntype TypePropertyIsNotAllowed<error_message extends string> =\n    error_message;\nexport type NoType<T, error_message extends string> = T extends { type: any }\n    ? TypePropertyIsNotAllowed<error_message>\n    : T;\nexport type AType<T, U> = T extends U ? U extends T ? T : [T, U] : [T, U]\n\nexport type Subset<T extends U, U> = U\nexport type Superset<T, U extends T> = T\n\nexport type Super<T> = T extends infer U ? U : never\n\nexport type NotFunction<T> = T extends Function ? never : T\n\n"],"names":[],"sourceRoot":""}