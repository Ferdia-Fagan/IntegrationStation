{"version":3,"file":"code/full/backend/categories/IO/Extraction.ts.js","mappings":";;;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACOA;;;;GAIG;AACI,SAAS,oBAAoB,CAGhC,SAAoB,EACpB,qBAAyD;IAEzD,OAAO,qBAAqB;SACvB,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;QACpB,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC;QACvB,OAAO,MAAM;IACrB,CAAC,EAAE,EAAE,CAAC;AACV,CAAC","sources":["webpack://dist/webpack/bootstrap","webpack://dist/webpack/runtime/define property getters","webpack://dist/webpack/runtime/hasOwnProperty shorthand","webpack://dist/webpack/runtime/make namespace object","webpack://dist/./src/code/full/backend/categories/IO/Extraction.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { keys } from 'ts-transformer-keys';\nimport {KeysOfMethodsOfT} from \"../types/utils/Filtering\";\n\n\n/**\n * EXTRACTED_FUNC_KEYS extends KeysOfMethodsOfT<COMPONENT>\n */\nexport type ComponentFunctionMapT<\n    COMPONENT\n> = {\n    [key in KeysOfMethodsOfT<COMPONENT>]?: COMPONENT[key] extends infer R ? R : never\n}\n\n/**\n * Notes:\n * Use ts-transformer-keys to convert interface to array of keys\n * @constructor\n */\nexport function ExtractFunctionsFrom<\n    COMPONENT\n>(\n    component: COMPONENT,\n    extractedFunctionKeys: Array<KeysOfMethodsOfT<COMPONENT>>\n): ComponentFunctionMapT<COMPONENT> {\n    return extractedFunctionKeys\n        .reduce((result, key) => {\n            result = component[key]\n            return result\n    }, {})\n}\n\n\n"],"names":[],"sourceRoot":""}